<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gilgi.org (Posts about graph)</title><link>https://gilgi.org/</link><description></description><atom:link href="https://gilgi.org/categories/graph.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2019 &lt;a href="mailto:site@gilgi.org"&gt;gilgi&lt;/a&gt; </copyright><lastBuildDate>Tue, 17 Dec 2019 22:57:05 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Dota 2 friend network visualization</title><link>https://gilgi.org/blog/dotafriends/</link><dc:creator>gilgi</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;img src="https://gilgi.org/images/blog/dotafriends.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;What better way is there to enjoy games than with friends? Of course, some friends have better synergies than others. What if there was a way to quantify those synergies and draw a group of friends as a graph, with high-synergy friends placed close together and low-synergy friends placed further apart?&lt;/p&gt;
&lt;p&gt;In this post, we'll use the &lt;a href="https://docs.opendota.com/"&gt;OpenDota API&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Multidimensional_scaling"&gt;multidimensional scaling (MDS)&lt;/a&gt;, and &lt;a href="https://networkx.github.io/"&gt;networkx&lt;/a&gt; to visualize a network of friends playing Dota 2 together.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://colab.research.google.com/drive/1lJkUGqKbb8GSzYP6ClreBx41lbwtf1P2"&gt;&lt;img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gilgi.org/blog/dotafriends/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>API</category><category>Dota 2</category><category>graph</category><category>MDS</category><category>notebook</category><category>Python</category><category>visualization</category><guid>https://gilgi.org/blog/dotafriends/</guid><pubDate>Wed, 14 Aug 2019 04:00:00 GMT</pubDate></item><item><title>Partially solving the "knight dialer" problem using graph exploration</title><link>https://gilgi.org/blog/knight-dialer/</link><dc:creator>gilgi</dc:creator><description>&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;img src="https://gilgi.org/images/blog/knight-dialer.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;This week, a friend showed me the &lt;a href="https://leetcode.com/problems/knight-dialer/"&gt;knight dialer coding problem&lt;/a&gt;. As usual, I couldn't resist framing it as a graph exploration problem - read on to see how I tackled it.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://colab.research.google.com/drive/1eJ1GHt4YTn4n65TrUxQBXwJOfFoK0gMd"&gt;&lt;img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gilgi.org/blog/knight-dialer/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>coding problem</category><category>graph</category><category>notebook</category><category>Python</category><guid>https://gilgi.org/blog/knight-dialer/</guid><pubDate>Thu, 20 Jun 2019 04:00:00 GMT</pubDate></item></channel></rss>